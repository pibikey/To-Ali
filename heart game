<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Ultimate Love Messages & Game</title>
<style>
  /* Animated gradient background */
  @keyframes gradientBG {
    0% {background-position: 0% 50%;}
    50% {background-position: 100% 50%;}
    100% {background-position: 0% 50%;}
  }

  body {
    margin: 0;
    font-family: 'Arial', sans-serif;
    background: linear-gradient(-45deg, #ff9ec1, #ff5fa2, #ffccd5, #ffc0cb);
    background-size: 400% 400%;
    animation: gradientBG 20s ease infinite;
    overflow-x: hidden;
    position: relative;
  }

  h1 {
    text-align: center;
    color: #fff;
    text-shadow: 0 0 20px #ff5fa2;
    margin-top: 20px;
  }

  .messages {
    max-width: 800px;
    margin: 20px auto;
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 0 20px;
    position: relative;
    z-index: 1;
  }

  .message {
    background: rgba(255, 255, 255, 0.2);
    color: #fff;
    padding: 15px 20px;
    border-radius: 12px;
    cursor: pointer;
    transition: transform 0.3s, background 0.3s;
    position: relative;
    overflow: hidden;
  }

  .message:hover {
    transform: scale(1.05);
    background: rgba(255, 255, 255, 0.35);
  }

  .message.expanded {
    background: rgba(255, 255, 255, 0.5);
  }

  .love-btn {
    display: block;
    margin: 20px auto;
    padding: 15px 30px;
    font-size: 18px;
    color: #fff;
    background-color: #ff5fa2;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    animation: pulse 2s infinite;
    position: relative;
    z-index: 1;
  }

  @keyframes pulse {
    0% {transform: scale(1);}
    50% {transform: scale(1.1);}
    100% {transform: scale(1);}
  }

  .confetti {
    position: absolute;
    width: 8px;
    height: 8px;
    background-color: #ff5fa2;
    opacity: 0.8;
    pointer-events: none;
    animation: confettiFall 2s linear forwards;
    border-radius: 50%;
  }

  @keyframes confettiFall {
    0% {transform: translateY(0) rotate(0deg);}
    100% {transform: translateY(500px) rotate(360deg); opacity: 0;}
  }

  .cursor-sparkle {
    position: absolute;
    width: 6px;
    height: 6px;
    background-color: #fff;
    border-radius: 50%;
    pointer-events: none;
    opacity: 0.8;
    animation: sparkleAnim 0.6s linear forwards;
  }

  @keyframes sparkleAnim {
    0% {transform: scale(1);}
    100% {transform: scale(0); opacity: 0;}
  }

  .heart {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #ff5fa2;
    transform: rotate(-45deg);
    animation: floatUp 3s linear forwards;
  }

  .heart::before,
  .heart::after {
    content: "";
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #ff5fa2;
    border-radius: 50%;
  }

  .heart::before { top: -5px; left: 0; }
  .heart::after { top: 0; left: 5px; }

  @keyframes floatUp {
    0% {transform: translateY(0) rotate(-45deg); opacity: 1;}
    100% {transform: translateY(-300px) rotate(-45deg); opacity: 0;}
  }

  .side-shape {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: rgba(255,255,255,0.3);
    border-radius: 50%;
    transition: transform 0.3s, background-color 0.3s;
  }

  .side-shape:hover {
    transform: scale(1.8) rotate(45deg);
    background-color: rgba(255,255,255,0.8);
  }

  .left-shapes { left: 10px; }
  .right-shapes { right: 10px; }

  /* Game styles */
  #gameArea {
    position: relative;
    width: 100%;
    height: 400px;
    border: 2px dashed rgba(255,255,255,0.5);
    margin: 20px 0;
    overflow: hidden;
    border-radius: 15px;
  }

  .basket {
    position: absolute;
    bottom: 10px;
    width: 80px;
    height: 40px;
    background-color: #ff5fa2;
    border-radius: 20px;
  }

  .fallingHeart {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #ffccd5;
    transform: rotate(-45deg);
  }

  .fallingHeart::before,
  .fallingHeart::after {
    content:"";
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #ffccd5;
    border-radius: 50%;
  }
  .fallingHeart::before { top: -10px; left: 0;}
  .fallingHeart::after { top: 0; left: 10px;}
</style>
</head>
<body>

<h1>ðŸ’– My Love Messages & Game ðŸ’–</h1>

<div class="messages">
  <div class="message">I love you more than words can express.</div>
  <div class="message">Every moment with you is magical.</div>
  <div class="message">Your smile brightens my darkest days.</div>
  <div class="message">I canâ€™t imagine life without you.</div>
</div>

<button class="love-btn">ðŸ’– Love ðŸ’–</button>

<div id="gameArea"></div>
<div id="score" style="text-align:center;color:white;font-size:20px;">Score: 0</div>

<div class="left-shapes"></div>
<div class="right-shapes"></div>

<script>
  // Message click + confetti
  const messages = document.querySelectorAll('.message');
  messages.forEach(msg => {
    msg.addEventListener('click', () => {
      msg.classList.toggle('expanded');
      for(let i=0; i<15; i++){
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        const rect = msg.getBoundingClientRect();
        confetti.style.left = rect.left + Math.random()*rect.width + 'px';
        confetti.style.top = rect.top + 'px';
        document.body.appendChild(confetti);
        setTimeout(() => confetti.remove(), 2000);
      }
    });
  });

  // Cursor sparkles
  document.addEventListener('mousemove', e => {
    const sparkle = document.createElement('div');
    sparkle.className = 'cursor-sparkle';
    sparkle.style.left = e.pageX + 'px';
    sparkle.style.top = e.pageY + 'px';
    document.body.appendChild(sparkle);
    setTimeout(() => sparkle.remove(), 600);
  });

  // Love button hearts
  const loveBtn = document.querySelector('.love-btn');
  loveBtn.addEventListener('click', () => {
    for(let i=0; i<20; i++){
      const heart = document.createElement('div');
      heart.className = 'heart';
      heart.style.left = loveBtn.offsetLeft + loveBtn.offsetWidth/2 + Math.random()*100 - 50 + 'px';
      heart.style.top = loveBtn.offsetTop + 'px';
      heart.style.width = heart.style.height = 8 + Math.random()*12 + 'px';
      document.body.appendChild(heart);
      setTimeout(() => heart.remove(), 3000);
    }
  });

  // Side shapes
  function createSideShapes() {
    const left = document.querySelector('.left-shapes');
    const right = document.querySelector('.right-shapes');
    for(let i=0; i<15; i++){
      const shapeL = document.createElement('div');
      shapeL.className = 'side-shape';
      shapeL.style.top = Math.random() * window.innerHeight + 'px';
      left.appendChild(shapeL);

      const shapeR = document.createElement('div');
      shapeR.className = 'side-shape';
      shapeR.style.top = Math.random() * window.innerHeight + 'px';
      right.appendChild(shapeR);
    }
  }
  createSideShapes();

  document.addEventListener('mousemove', e => {
    const leftShapes = document.querySelectorAll('.left-shapes .side-shape');
    const rightShapes = document.querySelectorAll('.right-shapes .side-shape');
    leftShapes.forEach(s => s.style.transform = `translateX(${(e.clientX/window.innerWidth)*20}px)`);
    rightShapes.forEach(s => s.style.transform = `translateX(-${(e.clientX/window.innerWidth)*20}px)`);
  });

  // ======= Game Logic =======
  const gameArea = document.getElementById('gameArea');
  let score = 0;

  const basket = document.createElement('div');
  basket.className = 'basket';
  basket.style.left = '50%';
  gameArea.appendChild(basket);

  let basketX = gameArea.offsetWidth / 2 - 40;

  document.addEventListener('mousemove', e => {
    const rect = gameArea.getBoundingClientRect();
    basketX = e.clientX - rect.left - 40;
    if(basketX < 0) basketX = 0;
    if(basketX > gameArea.offsetWidth - 80) basketX = gameArea.offsetWidth - 80;
    basket.style.left = basketX + 'px';
  });

  function spawnHeart() {
    const heart = document.createElement('div');
    heart.className = 'fallingHeart';
    heart.style.left = Math.random() * (gameArea.offsetWidth - 20) + 'px';
    heart.style.top = '-20px';
    gameArea.appendChild(heart);

    const fallInterval = setInterval(() => {
      const top = parseInt(heart.style.top);
      heart.style.top = top + 4 + 'px';

      const heartRect = heart.getBoundingClientRect();
      const basketRect = basket.getBoundingClientRect();

      if(!(heartRect.bottom < basketRect.top || heartRect.top > basketRect.bottom || heartRect.right < basketRect.left || heartRect.left > basketRect.right)) {
        score++;
        document.getElementById('score').innerText = "Score: " + score;
        heart.remove();
        clearInterval(fallInterval);
      } else if (top > gameArea.offsetHeight) {
        heart.remove();
        clearInterval(fallInterval);
      }
    }, 20);
  }

  setInterval(spawnHeart, 800);
</script>

</body>
</html>
